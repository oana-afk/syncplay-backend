from flask import Blueprint, render_template, request, redirect, url_for
from firebase_utils import get_shows, get_questions_for_show, set_active_question, init_firebase
import threading
import time
import os
import json

admin_bp = Blueprint("admin", __name__, template_folder="admin_panel/templates")

# Date statice pentru fallback
FALLBACK_SHOWS = ["detectivul_din_canapea", "master_chef", "vocea_romaniei"]
FALLBACK_QUESTIONS = {
    "detectivul_din_canapea": [
        {"id": "q1", "text": "Cine a furat mingea?", "correct": "Pisica"},
        {"id": "q2", "text": "Cine este detectivul?", "correct": "Tu"},
    ],
    "master_chef": [
        {"id": "q1", "text": "C√¢te ouƒÉ folosim la omletƒÉ?", "correct": "2"},
        {"id": "q2", "text": "Care este ingredientul secret?", "correct": "Dragostea"},
    ],
    "vocea_romaniei": [
        {"id": "q1", "text": "Cine a c√¢»ôtigat sezonul trecut?", "correct": "Concurentul X"},
        {"id": "q2", "text": "C√¢»õi jura»õi sunt?", "correct": "4"},
    ]
}

# Fi»ôier local pentru a stoca √Æntrebarea activƒÉ c√¢nd Firebase e»ôueazƒÉ
ACTIVE_QUESTION_FILE = "active_questions.json"

# VariabilƒÉ √Æn memorie pentru √ÆntrebƒÉrile active
_active_questions_memory = {}

# Rezultate cache pentru a evita apeluri Firebase repetate
_shows_cache = None
_questions_cache = {}
_last_cache_update = 0
CACHE_TIMEOUT = 300  # 5 minute

# Ini»õializeazƒÉ fi»ôierul active_questions.json la pornire
def initialize_active_questions_file():
    """CreeazƒÉ fi»ôierul active_questions.json dacƒÉ nu existƒÉ"""
    if not os.path.exists(ACTIVE_QUESTION_FILE):
        try:
            with open(ACTIVE_QUESTION_FILE, 'w') as f:
                json.dump(_active_questions_memory, f)
            print(f"‚úÖ Fi»ôierul {ACTIVE_QUESTION_FILE} creat cu succes")
        except Exception as e:
            print(f"‚ùå Eroare la crearea fi»ôierului {ACTIVE_QUESTION_FILE}: {e}")

# Ini»õializeazƒÉ fi»ôierul la import
initialize_active_questions_file()

def get_shows_with_timeout(timeout=2):
    """Ob»õine lista de show-uri cu timeout strict"""
    global _shows_cache, _last_cache_update
    
    # Folose»ôte cache dacƒÉ este disponibil »ôi √ÆncƒÉ valid
    current_time = time.time()
    if _shows_cache is not None and (current_time - _last_cache_update) < CACHE_TIMEOUT:
        print("üíæ Folosind show-uri din cache")
        return _shows_cache, None, False
    
    result = []
    firebase_error = None
    firebase_timeout = False
    
    def fetch_data():
        nonlocal result
        try:
            db = init_firebase()
            if db:
                result = get_shows()
            else:
                firebase_error = "Nu s-a putut ini»õializa Firebase"
        except Exception as e:
            firebase_error = str(e)
    
    # Porne»ôte opera»õia √Æntr-un thread separat
    thread = threading.Thread(target=fetch_data)
    thread.daemon = True
    thread.start()
    
    # A»ôteaptƒÉ thread-ul sƒÉ termine sau timeout
    thread.join(timeout)
    
    if thread.is_alive():
        # Timeout - thread-ul √ÆncƒÉ ruleazƒÉ dupƒÉ timeout
        print(f"‚ö†Ô∏è Timeout la ob»õinerea show-urilor dupƒÉ {timeout} secunde")
        firebase_timeout = True
        return [], "Timeout la ob»õinerea datelor din Firebase", True
    
    if not result and not firebase_error:
        firebase_error = "Nu s-au gƒÉsit show-uri √Æn Firebase"
    
    if result:
        # ActualizeazƒÉ cache-ul
        _shows_cache = result
        _last_cache_update = current_time
        
    return result, firebase_error, firebase_timeout

def get_questions_with_timeout(show_id, timeout=2):
    """Ob»õine √ÆntrebƒÉrile pentru un show cu timeout strict"""
    global _questions_cache, _last_cache_update
    
    # Folose»ôte cache dacƒÉ este disponibil »ôi √ÆncƒÉ valid
    current_time = time.time()
    if show_id in _questions_cache and (current_time - _last_cache_update) < CACHE_TIMEOUT:
        print(f"üíæ Folosind √ÆntrebƒÉri din cache pentru {show_id}")
        return _questions_cache[show_id], None, False
    
    result = []
    firebase_error = None
    firebase_timeout = False
    
    def fetch_data():
        nonlocal result
        try:
            result = get_questions_for_show(show_id)
        except Exception as e:
            firebase_error = str(e)
    
    # Porne»ôte opera»õia √Æntr-un thread separat
    thread = threading.Thread(target=fetch_data)
    thread.daemon = True
    thread.start()
    
    # A»ôteaptƒÉ thread-ul sƒÉ termine sau timeout
    thread.join(timeout)
    
    if thread.is_alive():
        # Timeout - thread-ul √ÆncƒÉ ruleazƒÉ dupƒÉ timeout
        print(f"‚ö†Ô∏è Timeout la ob»õinerea √ÆntrebƒÉrilor dupƒÉ {timeout} secunde")
        firebase_timeout = True
        return [], "Timeout la ob»õinerea √ÆntrebƒÉrilor din Firebase", True
    
    if result:
        # ActualizeazƒÉ cache-ul
        _questions_cache[show_id] = result
        _last_cache_update = current_time
        
    return result, firebase_error, firebase_timeout

def set_active_question_safe(show_id, question_id, timeout=3):
    """Versiune mai sigurƒÉ a func»õiei set_active_question cu timeout »ôi fallback local"""
    activation_success = [False]  # Folosim o listƒÉ pentru a putea modifica din thread
    activation_error = [None]
    
    def activate_question():
        try:
            # √éncearcƒÉ sƒÉ activeze √Æntrebarea √Æn Firebase
            result = set_active_question(show_id, question_id)
            activation_success[0] = result
        except Exception as e:
            activation_error[0] = str(e)
            print(f"üî• Eroare la set_active_question: {e}")
    
    # Porne»ôte un thread pentru opera»õia de activare
    thread = threading.Thread(target=activate_question)
    thread.daemon = True
    thread.start()
    
    # A»ôteaptƒÉ maxim 'timeout' secunde
    thread.join(timeout)
    
    if thread.is_alive():
        # Thread-ul √ÆncƒÉ ruleazƒÉ, scriem √Æn fi»ôierul local »ôi memoria localƒÉ
        save_active_question_local(show_id, question_id)
        return False, f"Timeout la activarea √ÆntrebƒÉrii dupƒÉ {timeout} secunde. SalvatƒÉ local."
    
    if not activation_success[0] or activation_error[0]:
        # Firebase a e»ôuat, salvƒÉm √Æntrebarea local
        save_active_question_local(show_id, question_id)
        error_msg = activation_error[0] or "Eroare necunoscutƒÉ"
        return False, f"Eroare Firebase: {error_msg}. √éntrebare salvatƒÉ local."
    
    # Firebase a reu»ôit, sincronizƒÉm »ôi stocarea localƒÉ
    save_active_question_local(show_id, question_id)
    return True, None

def save_active_question_local(show_id, question_id):
    """SalveazƒÉ √Æntrebarea activƒÉ √Æn memoria localƒÉ »ôi fi»ôier"""
    global _active_questions_memory
    
    # ActualizeazƒÉ memoria
    _active_questions_memory[show_id] = question_id
    
    # SalveazƒÉ √Æn fi»ôier pentru persisten»õƒÉ √Æntre request-uri (dar nu √Æntre reporniri)
    try:
        # Ini»õializeazƒÉ fi»ôierul dacƒÉ nu existƒÉ
        initialize_active_questions_file()
        
        # √éncearcƒÉ sƒÉ citeascƒÉ con»õinutul existent
        try:
            with open(ACTIVE_QUESTION_FILE, 'r') as f:
                active_questions = json.load(f)
        except Exception:
            active_questions = {}
        
        # ActualizeazƒÉ »ôi salveazƒÉ
        active_questions[show_id] = question_id
        with open(ACTIVE_QUESTION_FILE, 'w') as f:
            json.dump(active_questions, f)
            
        print(f"‚úÖ √éntrebare salvatƒÉ local: {question_id} pentru show: {show_id}")
        return True
    except Exception as e:
        print(f"‚ùå Eroare la salvarea localƒÉ: {e}")
        return False

def get_active_question_local(show_id):
    """Ob»õine √Æntrebarea activƒÉ din memoria localƒÉ sau fi»ôier"""
    global _active_questions_memory
    
    # √éncearcƒÉ √Ænt√¢i din memorie
    if show_id in _active_questions_memory:
        return _active_questions_memory[show_id]
    
    # Apoi √ÆncearcƒÉ din fi»ôier dacƒÉ existƒÉ
    if os.path.exists(ACTIVE_QUESTION_FILE):
        try:
            with open(ACTIVE_QUESTION_FILE, 'r') as f:
                active_questions = json.load(f)
                # ActualizeazƒÉ memoria cu valorile din fi»ôier
                _active_questions_memory.update(active_questions)
                return active_questions.get(show_id)
        except Exception as e:
            print(f"‚ùå Eroare la citirea din fi»ôierul local: {e}")
    
    # ReturneazƒÉ q1 pentru a for»õa afi»ôarea √ÆntrebƒÉrii 1
    return "q1"

@admin_bp.route("/admin", methods=["GET", "POST"])
def admin_panel():
    start_time = time.time()
    firebase_error = None
    firebase_timeout = False
    
    db = init_firebase()
    if not db:
        firebase_error = "Nu s-a putut stabili conexiunea cu Firebase"
    
    selected_show = request.form.get("show_id") if request.method == "POST" else request.args.get("show_id")
    question_id = request.form.get("question_id")
        print(f"üéØ Admin a trimis: show_id={selected_show}, question_id={question_id}")

    
    # ProceseazƒÉ activarea √ÆntrebƒÉrii dacƒÉ este cazul
    if selected_show and question_id and request.method == "POST":
        success, error_message = set_active_question_safe(selected_show, question_id)
        
        if success:
            print(f"‚úÖ √éntrebare activatƒÉ: {question_id} pentru show: {selected_show}")
        else:
            firebase_error = error_message
            
        return redirect(url_for("admin.admin_panel", show_id=selected_show))
    
    # Ob»õine show-uri din Firebase cu timeout
    shows, shows_error, shows_timeout = get_shows_with_timeout()
    if shows_error:
        firebase_error = shows_error
    if shows_timeout:
        firebase_timeout = True
    
    # DacƒÉ nu am ob»õinut show-uri, folosim datele statice
    if not shows:
        print("‚ö†Ô∏è Folosind lista de show-uri statice")
        shows = FALLBACK_SHOWS
    
    # Ob»õine √ÆntrebƒÉri pentru show-ul selectat
    questions = []
    if selected_show:
        if firebase_timeout:
            # DacƒÉ am avut timeout la show-uri, folosim direct datele statice
            questions = FALLBACK_QUESTIONS.get(selected_show, [])
            print(f"‚ö†Ô∏è Folosind √ÆntrebƒÉri statice pentru {selected_show}")
        else:
            # Altfel √ÆncercƒÉm sƒÉ ob»õinem √ÆntrebƒÉrile din Firebase
            questions, questions_error, questions_timeout = get_questions_with_timeout(selected_show)
            
            if questions_error:
                firebase_error = questions_error
            if questions_timeout:
                firebase_timeout = True
                
            # DacƒÉ nu am ob»õinut √ÆntrebƒÉri, folosim datele statice
            if not questions:
                print(f"‚ö†Ô∏è Folosind √ÆntrebƒÉri statice pentru {selected_show}")
                questions = FALLBACK_QUESTIONS.get(selected_show, [])
    
    # Ob»õine √Æntrebarea activƒÉ pentru show-ul selectat (din memorie sau local)
    active_question_id = None
    if selected_show:
        active_question_id = get_active_question_local(selected_show)
    
    # CalculeazƒÉ timpul total de procesare
    processing_time = time.time() - start_time
    print(f"‚è±Ô∏è Timp total procesare admin: {processing_time:.2f} secunde")
    
    return render_template(
        "admin.html",
        shows=shows,
        questions=questions,
        selected_show=selected_show,
        firebase_error=firebase_error,
        firebase_timeout=firebase_timeout,
        active_question_id=active_question_id,
        processing_time=f"{processing_time:.2f}"
    )
