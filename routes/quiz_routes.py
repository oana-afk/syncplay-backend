from flask import Blueprint, jsonify
from services.data_loader import load_quiz_data
import threading
import time
import os
import json
import random

quiz_bp = Blueprint('quiz_bp', __name__)

# Fi»ôier local pentru a citi √Æntrebarea activƒÉ
ACTIVE_QUESTION_FILE = "active_questions.json"

# √éntrebare activƒÉ √Æn memorie, pentru c√¢nd fi»ôierul este »ôters √Æntre reporniri
_active_questions = {
    "detectivul_din_canapea": "q1"  # Valoare hardcodatƒÉ pentru a asigura afi»ôarea
}

# Cache pentru quiz-uri
_quiz_data_cache = None
_last_cache_update = 0
CACHE_TIMEOUT = 300  # 5 minute


# Ini»õializeazƒÉ fi»ôierul active_questions.json la pornire
def initialize_active_questions_file():
    """CreeazƒÉ fi»ôierul active_questions.json dacƒÉ nu existƒÉ"""
    if not os.path.exists(ACTIVE_QUESTION_FILE):
        try:
            with open(ACTIVE_QUESTION_FILE, 'w') as f:
                json.dump(_active_questions, f)
            print(f"‚úÖ Fi»ôierul {ACTIVE_QUESTION_FILE} creat cu succes")
        except Exception as e:
            print(f"‚ùå Eroare la crearea fi»ôierului {ACTIVE_QUESTION_FILE}: {e}")


# Ini»õializeazƒÉ fi»ôierul la import
initialize_active_questions_file()


def get_quiz_data_with_timeout(timeout=2):
    """Ob»õine datele quiz cu timeout »ôi caching"""
    global _quiz_data_cache, _last_cache_update

    # VerificƒÉ cache-ul √Ænt√¢i
    current_time = time.time()
    if _quiz_data_cache is not None and (current_time - _last_cache_update) < CACHE_TIMEOUT:
        print("üíæ Folosind date quiz din cache")
        return _quiz_data_cache

    result = None
    timeout_occurred = False

    def fetch_data():
        nonlocal result
        try:
            result = load_quiz_data()
        except Exception as e:
            print(f"‚ùå Eroare la √ÆncƒÉrcarea quiz-urilor: {e}")
            result = None

    # Porne»ôte thread-ul pentru a √ÆncƒÉrca datele
    thread = threading.Thread(target=fetch_data)
    thread.daemon = True
    thread.start()

    # A»ôteaptƒÉ thread-ul cu timeout
    thread.join(timeout)

    if thread.is_alive():
        timeout_occurred = True
        print(f"‚ö†Ô∏è Timeout la √ÆncƒÉrcarea quiz-urilor dupƒÉ {timeout} secunde")

        # ReturneazƒÉ cache-ul vechi dacƒÉ existƒÉ
        if _quiz_data_cache is not None:
            print("üîÑ Folosind cache-ul vechi pentru quiz-uri")
            return _quiz_data_cache

        # Altfel returneazƒÉ date statice de fallback
        return [
            {
                "question": "Care este capitala Fran»õei?",
                "options": ["Paris", "Berlin", "Madrid", "Roma"],
                "correct": "Paris",
                "id": "q1"
            },
            {
                "question": "Ce simbol are fluorul?",
                "options": ["Fl", "F", "Fr", "Fe"],
                "correct": "F",
                "id": "q2"
            },
            {
                "question": "C√¢te continente are planeta PƒÉm√¢nt?",
                "options": ["5", "6", "7", "8"],
                "correct": "7",
                "id": "q3"
            }
        ]

    # VerificƒÉ rezultatul »ôi actualizeazƒÉ cache-ul dacƒÉ este valid
    if result is not None and not isinstance(result, dict) and "error" not in result:
        _quiz_data_cache = result
        _last_cache_update = current_time
        return result

    # DacƒÉ avem eroare dar avem cache vechi, folose»ôte-l
    if _quiz_data_cache is not None:
        print("‚ö†Ô∏è Eroare la ob»õinerea quiz-urilor, folosim cache-ul vechi")
        return _quiz_data_cache

    # Ultimul resort - date statice
    return [
        {
            "question": "Care este capitala Fran»õei?",
            "options": ["Paris", "Berlin", "Madrid", "Roma"],
            "correct": "Paris",
            "id": "q1"
        },
        {
            "question": "Ce simbol are fluorul?",
            "options": ["Fl", "F", "Fr", "Fe"],
            "correct": "F",
            "id": "q2"
        },
        {
            "question": "C√¢te continente are planeta PƒÉm√¢nt?",
            "options": ["5", "6", "7", "8"],
            "correct": "7",
            "id": "q3"
        }
    ]


def save_active_question_local(show_id, question_id):
    """SalveazƒÉ √Æntrebarea activƒÉ √Æn fi»ôier »ôi memoria localƒÉ"""
    global _active_questions

    # ActualizeazƒÉ dic»õionarul √Æn memorie
    _active_questions[show_id] = question_id

    # SalveazƒÉ »ôi √Æn fi»ôier pentru persisten»õƒÉ √Æntre cereri
    try:
        # AsigurƒÉ-te cƒÉ fi»ôierul existƒÉ √Ænainte de a-l citi
        initialize_active_questions_file()

        # √éncearcƒÉ sƒÉ cite»ôti con»õinutul existent dacƒÉ existƒÉ
        try:
            with open(ACTIVE_QUESTION_FILE, 'r') as f:
                active_questions = json.load(f)
        except Exception:
            active_questions = {}

        # ActualizeazƒÉ »ôi salveazƒÉ √Ænapoi
        active_questions[show_id] = question_id
        with open(ACTIVE_QUESTION_FILE, 'w') as f:
            json.dump(active_questions, f)

        print(f"‚úÖ √éntrebare salvatƒÉ: {question_id} pentru show: {show_id}")
        return True
    except Exception as e:
        print(f"‚ùå Eroare la salvare: {e}")
        return False


def get_active_question_local(show_id="detectivul_din_canapea"):
    """Ob»õine √Æntrebarea activƒÉ din fi»ôier (fƒÉrƒÉ a pƒÉstra cache permanent)"""
    global _active_questions

    # Re√ÆncarcƒÉ fi»ôierul de fiecare datƒÉ pentru a evita inconsisten»õe
    if os.path.exists(ACTIVE_QUESTION_FILE):
        try:
            with open(ACTIVE_QUESTION_FILE, 'r', encoding='utf-8') as f:
                active_questions = json.load(f)
                _active_questions.update(active_questions)
                return active_questions.get(show_id)
        except Exception as e:
            print(f"‚ùå Eroare la citirea fi»ôierului {ACTIVE_QUESTION_FILE}: {e}")

    # Fallback dacƒÉ fi»ôierul nu existƒÉ sau nu con»õine show-ul
    print(f"‚ö†Ô∏è Nu s-a gƒÉsit √Æntrebarea activƒÉ pentru {show_id}, returnƒÉm fallback 'q1'")
    return "q1"



def reorder_questions_with_active_first(questions, active_id):
    """ReordoneazƒÉ √ÆntrebƒÉrile pentru a pune √Æntrebarea activƒÉ prima"""
    if not active_id:
        print("‚ö†Ô∏è Nu existƒÉ √Æntrebare activƒÉ, nu reordonƒÉm")
        return questions

    print(f"üîç CƒÉutƒÉm √Æntrebarea activƒÉ cu ID: {active_id} √Æn {len(questions)} √ÆntrebƒÉri")

    # LogƒÉm toate ID-urile pentru a vedea ce avem
    question_ids = []
    for q in questions:
        q_id = q.get("id", "MISSING_ID")
        question_ids.append(q_id)

    print(f"üìã ID-uri disponibile: {question_ids}")

    active_question = None
    other_questions = []

    for q in questions:
        # VerificƒÉm fiecare √Æntrebare pentru potrivire ID
        q_id = q.get("id", "MISSING_ID")
        if q_id == active_id:
            print(f"‚úÖ Am gƒÉsit √Æntrebarea activƒÉ: {q_id}")
            active_question = q
        else:
            other_questions.append(q)

    if active_question:
        print(f"‚úÖ Punem √Æntrebarea activƒÉ ({active_id}) prima √Æn listƒÉ")
        return [active_question] + other_questions
    else:
        print(f"‚ùå √éntrebarea activƒÉ cu ID {active_id} nu a fost gƒÉsitƒÉ √Æn lista de √ÆntrebƒÉri!")

    return questions


@quiz_bp.route('/debug', methods=['GET'])
def debug_quiz():
    """Endpoint de debug pentru a inspecta toate datele relevante"""
    all_questions = get_quiz_data_with_timeout()
    active_question_id = get_active_question_local()

    # VerificƒÉ dacƒÉ √Æntrebarea activƒÉ existƒÉ √Æn lista de √ÆntrebƒÉri
    active_found = False
    question_ids = []

    for q in all_questions:
        q_id = q.get("id", "MISSING_ID")
        question_ids.append(q_id)
        if q_id == active_question_id:
            active_found = True

    # ReturneazƒÉ toate informa»õiile pentru debugging
    debug_info = {
        "active_question_id": active_question_id,
        "active_found_in_questions": active_found,
        "question_ids": question_ids,
        "questions_count": len(all_questions),
        "active_questions_file_exists": os.path.exists(ACTIVE_QUESTION_FILE),
        "active_questions_in_memory": _active_questions
    }

    # AdaugƒÉ con»õinutul fi»ôierului active_questions.json dacƒÉ existƒÉ
    if os.path.exists(ACTIVE_QUESTION_FILE):
        try:
            with open(ACTIVE_QUESTION_FILE, 'r') as f:
                debug_info["active_questions_file_content"] = json.load(f)
        except Exception as e:
            debug_info["active_questions_file_error"] = str(e)

    return jsonify(debug_info)


@quiz_bp.route('/current', methods=['GET'])
def get_current_quiz():
    start_time = time.time()

    # Ob»õine quiz-urile cu timeout »ôi caching
    all_questions = get_quiz_data_with_timeout()

    # VerificƒÉ dacƒÉ existƒÉ o √Æntrebare activƒÉ
    active_question_id = get_active_question_local()
    print(f"üîç √éntrebare activƒÉ: {active_question_id}")

    # ReordoneazƒÉ √ÆntrebƒÉrile pentru a pune √Æntrebarea activƒÉ prima
    if active_question_id:
        all_questions = reorder_questions_with_active_first(all_questions, active_question_id)

    # CalculeazƒÉ timpul de procesare
    processing_time = time.time() - start_time
    print(f"‚è±Ô∏è Timp procesare quiz: {processing_time:.2f} secunde")

    # ReturneazƒÉ lista completƒÉ de √ÆntrebƒÉri, cu cea activƒÉ prima
    return jsonify(all_questions)
